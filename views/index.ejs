<!DOCTYPE html>
<script src="https://unpkg.com/htmx.org@1.9.6" integrity="sha384-FhXw7b6AlE/jyjlZH5iHa/tTe9EpJ1Y55RjcgPbjeWMskSxZt1v9qkxLJWNJaGni" crossorigin="anonymous"></script>
<script type="module">
    import { interactivity } from "/js/interactivity.js";
    window.gameInteractivity = interactivity;
</script>

<head>
    <title>Gui Test</title>
    <link href="https://fonts.googleapis.com/css2?family=Pixelify+Sans:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/index.css">
    <link rel="stylesheet" href="/css/text-overlay.css">
    <link rel="stylesheet" href="/css/decision-box.css">
</head>

<body>
    <audio id="background-music" loop autoplay src="/audio/Kingdom-in-Despair.mp3"></audio>
    <div class="flex-centered">
        <div id="main">
            <div id="menu1">
                <div class="menu-bar">
                    <button hx-on:click="window.gameInteractivity.toggleClass('open', '#menu1 .inner')">Menu</button>
                </div>
                <div class="inner">
                    <button hx-on:click="window.gameInteractivity.toggleClass('open', '#menu1 .inner')">Close</button>
                    <h1>Main Menu</h1>
                    <hr/>
                    <p>Volume</p>
                    <input type="range" id="volume-control" value="0">
                </div>
            </div>

            <div id="main-scene" hx-get="/scenes/shrine/shrine" hx-swap="outerHTML swap:1s" hx-select="#main-scene" class="transition">
                <h1 class="center-text"><%= mainTitle %></h1>
                <%- include('../templates/test-include'); %>
            </div>
        </div>
    </div>
</body>

<script>
    // htmx.logger = function(elt, event, data) {
    //     if(console) {
    //         console.log(event, elt, data);
    //     }
    // }


    const audio = document.getElementById("background-music");
    let volumeControls = document.getElementById("volume-control");
    audio.volume = 0;
    volumeControls.addEventListener("change", function(e) {
        audio.volume = e.currentTarget.value / 100;
    })
</script>

</html>